{"version":3,"file":"component---src-pages-blog-tsx-344e3955178b1f3df059.js","mappings":"0KAAIA,E,0EACJ,SAASC,IAAiS,OAApRA,EAAWC,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,GAAU,CAAE,OAAOL,CAAQ,EAAUJ,EAASa,MAAMC,KAAMR,UAAY,CAElV,IAcA,EAdsB,SAAyBS,GAC7C,OAAoB,gBAAoB,MAAOf,EAAS,CACtDgB,MAAO,6BACPC,MAAO,GACPC,OAAQ,GACRC,KAAM,QACLJ,GAAQhB,IAAUA,EAAqB,gBAAoB,OAAQ,CACpEqB,OAAQ,UACRC,cAAe,QACfC,eAAgB,QAChBC,YAAa,EACbC,EAAG,kKAEP,ECLA,MAAMC,GAAgBC,EAAAA,EAAAA,IAAsB,CAAC,mBAEhCC,EAAwCC,IAAA,IAAC,WAAEC,GAAYD,EAAA,OAClEE,EAAAA,cAAA,KAAGC,UAAWN,KACZK,EAAAA,cAAA,QAAMC,UAAWN,EAAc,WAC7BK,EAAAA,cAACE,EAAU,OAEZH,EACC,ECTAJ,GAAgBC,EAAAA,EAAAA,IAAsB,CAAC,yBAMhCO,EAAkDL,IAAA,IAAAM,EAAA,IAAC,KAAEC,GAAMP,EAAA,OACtEE,EAAAA,cAAA,MAAIC,UAAWN,KACbK,EAAAA,cAACM,EAAAA,GAAI,CAACC,GAAE,SAAWF,EAAKG,KAAQP,UAAWN,EAAc,WACvDK,EAAAA,cAAA,OAAKC,UAAWN,EAAc,qBAC5BK,EAAAA,cAAA,OAAKS,IAAKJ,EAAKK,cAAcC,YAAaC,IAAKP,EAAKK,cAAcG,KAAKC,OAEzEd,EAAAA,cAAA,OAAKC,UAAWN,EAAc,cAC5BK,EAAAA,cAAA,KAAGC,UAAWN,EAAc,eAAgBU,EAAKU,UACjDf,EAAAA,cAAA,MAAIC,UAAWN,EAAc,YAAaU,EAAKW,MAAMA,QACpC,QAAhBZ,EAAAC,EAAKM,mBAAW,IAAAP,OAAA,EAAhBA,EAAkBa,MAAOjB,EAAAA,cAAA,YAAMkB,EAAAA,EAAAA,GAAeb,EAAKM,cACpDX,EAAAA,cAAA,OAAKC,UAAWN,EAAc,WAC5BK,EAAAA,cAAA,QAAMC,UAAU,QAAQI,EAAKc,cAE/BnB,EAAAA,cAACoB,EAAAA,QAAWC,UAAS,CAACC,SAAU,CAAEC,KAAM,GAAKtB,UAAWN,EAAc,cACnEU,EAAKmB,cAAcA,eAEtBxB,EAAAA,cAACH,EAAa,CAACE,WAAYM,EAAKoB,WAGjC,ECvBD9B,GAAgBC,EAAAA,EAAAA,IAAsB,CAAC,yBAEhC8B,EAA0C5B,IAAA,IAAC,MAAE6B,GAAO7B,EAAA,OAC9D8B,IAAQD,GAML,KALF3B,EAAAA,cAAA,MAAIC,UAAWN,KACZgC,EAAME,KAAIxB,GACTL,EAAAA,cAACG,EAAkB,CAACxB,IAAK0B,EAAKyB,GAAIzB,KAAMA,MAGtC,C,kFCfV,MAAMV,GAAgBC,E,QAAAA,IAAsB,CAAC,WAWhCmC,EAA0BjC,IAAA,IAAC,MACtCkB,EAAK,SACLgB,EAAQ,KACRC,EAAI,UACJC,EAAS,QACTC,EAAO,SACPC,GACDtC,EAAA,OACCE,EAAAA,cAAA,OAAKC,UAAWN,KACdK,EAAAA,cAAA,OAAKC,UAAWN,EAAc,cAC5BK,EAAAA,cAAA,OAAKC,UAAWN,EAAc,YAC5BK,EAAAA,cAAA,OAAKC,UAAWN,EAAc,aAC5BK,EAAAA,cAAA,OAAKC,UAAWN,EAAc,YAAaqB,GAC1CgB,GAAYhC,EAAAA,cAAA,OAAKC,UAAWN,EAAc,eAAgBqC,IAE5DC,GACCjC,EAAAA,cAAA,OAAKC,UAAWN,EAAc,kBAC5BK,EAAAA,cAACM,EAAAA,EAAInC,OAAAC,OAAA,CACH6B,UAAU,8BACVM,GAAI0B,GACCE,GAAW,CAAE,WAAYA,IAE7BD,IAINE,IAGD,C,wGCtCR,MAAMzC,GAAgBC,E,QAAAA,IAAsB,CAAC,wBAEhCyC,EAAqBA,IAE9BrC,EAAAA,cAACsC,EAAAA,GAAa,KACZtC,EAAAA,cAAA,OAAKC,UAAWN,KACdK,EAAAA,cAAC+B,EAAAA,EAAM,CACLf,MAAM,mBACNgB,SAAS,4EAEThC,EAAAA,cAACuC,EAAAA,EAAgB,Q,+HCL3B,MAAM5C,GAAgBC,EAAAA,EAAAA,IAAsB,CAAC,SAEhC4C,EAA8B1C,IAAA,IAAC,aAAE2C,EAAY,SAAEC,EAAQ,cAAEC,GAAe7C,EAAA,OACnFE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKC,UAAWN,KACdK,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,MAAIC,UAAWN,EAAc,YAAY,QACzCK,EAAAA,cAAA,KAAGC,UAAWN,EAAc,eAAe,iDAC3CK,EAAAA,cAAC0B,EAAAA,EAAc,CAACC,MAAOc,IACtBA,EAAahE,OAASiE,EAASjE,QAC9BuB,EAAAA,cAAA,OAAKC,UAAWN,EAAc,aAC5BK,EAAAA,cAAA,UAAQC,UAAU,8BAA8B2C,QAASD,GAAe,gBAOhF3C,EAAAA,cAACqC,EAAAA,EAAkB,MAClB,ECPL,MAjBoDvC,IAAyC,IAAtC+C,MAAM,sBAAEC,IAAyBhD,EACtF,MAAQiD,MAAOL,GAAaI,GAEtB,EAACL,EAAY,EAAEO,IAAmBC,EAAAA,EAAAA,UAAwBP,EAASQ,MAAM,EAL/D,IAOVP,GAAgBQ,EAAAA,EAAAA,cACpB,IAAMH,GAAgBI,GAAaV,EAASQ,MAAM,EAAGE,EAAU3E,OARjD,MASd,CAACiE,IAGH,OACE1C,EAAAA,cAACqD,EAAAA,GAAM,CAACC,QAASC,EAAAA,GAASC,MACxBxD,EAAAA,cAACwC,EAAQ,CAACC,aAAcA,EAAcC,SAAUA,EAAUC,cAAeA,IAClE,C","sources":["webpack://reportportal.github.io/./src/components/ArticlePreview/ArticlePreviewItem/ArticleAuthor/icons/author.inline.svg","webpack://reportportal.github.io/./src/components/ArticlePreview/ArticlePreviewItem/ArticleAuthor/ArticleAuthor.tsx","webpack://reportportal.github.io/./src/components/ArticlePreview/ArticlePreviewItem/ArticlePreviewItem.tsx","webpack://reportportal.github.io/./src/components/ArticlePreview/ArticlePreview.tsx","webpack://reportportal.github.io/./src/components/Banner/Banner.tsx","webpack://reportportal.github.io/./src/components/SubscriptionBanner/SubscriptionBanner.tsx","webpack://reportportal.github.io/./src/containers/BlogPage/BlogPage.tsx","webpack://reportportal.github.io/./src/pages/blog.tsx"],"sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nvar SvgAuthorinline = function SvgAuthorinline(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 17,\n    fill: \"none\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#8791AB\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"M13.33 14.265V12.93a2.667 2.667 0 0 0-2.666-2.666H5.331a2.667 2.667 0 0 0-2.667 2.666v1.334M8.003 7.598a2.667 2.667 0 1 0 0-5.333 2.667 2.667 0 0 0 0 5.333Z\"\n  })));\n};\nexport default SvgAuthorinline;","import React, { FC } from 'react';\nimport { createBemBlockBuilder } from '@app/utils';\n\nimport AuthorIcon from './icons/author.inline.svg';\n\nimport './ArticleAuthor.scss';\n\ninterface ArticleAuthorProps {\n  authorName: string;\n}\n\nconst getBlocksWith = createBemBlockBuilder(['article-author']);\n\nexport const ArticleAuthor: FC<ArticleAuthorProps> = ({ authorName }) => (\n  <p className={getBlocksWith()}>\n    <span className={getBlocksWith('__icon')}>\n      <AuthorIcon />\n    </span>\n    {authorName}\n  </p>\n);\n","import React, { FC } from 'react';\nimport { Link } from 'gatsby';\nimport { Typography } from 'antd';\nimport { renderRichText } from 'gatsby-source-contentful/rich-text';\nimport { BlogPostDto, createBemBlockBuilder } from '@app/utils';\n\nimport { ArticleAuthor } from './ArticleAuthor';\n\nimport './ArticlePreviewItem.scss';\n\nconst getBlocksWith = createBemBlockBuilder(['article-preview-item']);\n\ninterface ArticlePreviewItemProps {\n  post: BlogPostDto;\n}\n\nexport const ArticlePreviewItem: FC<ArticlePreviewItemProps> = ({ post }) => (\n  <li className={getBlocksWith()}>\n    <Link to={`/blog/${post.slug}`} className={getBlocksWith('__link')}>\n      <div className={getBlocksWith('__featured-image')}>\n        <img alt={post.featuredImage.description} src={post.featuredImage.file.url} />\n      </div>\n      <div className={getBlocksWith('__content')}>\n        <p className={getBlocksWith('__category')}>{post.category}</p>\n        <h2 className={getBlocksWith('__title')}>{post.title.title}</h2>\n        {post.description?.raw && <div>{renderRichText(post.description)}</div>}\n        <div className={getBlocksWith('__meta')}>\n          <span className=\"meta\">{post.publishDate}</span>\n        </div>\n        <Typography.Paragraph ellipsis={{ rows: 5 }} className={getBlocksWith('__excerpt')}>\n          {post.leadParagraph.leadParagraph}\n        </Typography.Paragraph>\n        <ArticleAuthor authorName={post.author} />\n      </div>\n    </Link>\n  </li>\n);\n","import React, { FC } from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport { createBemBlockBuilder, BlogPostDto } from '@app/utils';\n\nimport { ArticlePreviewItem } from './ArticlePreviewItem';\n\nimport './ArticlePreview.scss';\n\ninterface ArticlePreviewProps {\n  posts: BlogPostDto[];\n}\n\nconst getBlocksWith = createBemBlockBuilder(['article-preview-list']);\n\nexport const ArticlePreview: FC<ArticlePreviewProps> = ({ posts }) =>\n  !isEmpty(posts) ? (\n    <ul className={getBlocksWith()}>\n      {posts.map(post => (\n        <ArticlePreviewItem key={post.id} post={post} />\n      ))}\n    </ul>\n  ) : null;\n","import React, { FC, ReactNode } from 'react';\nimport { Link } from '@app/components/Link';\nimport { createBemBlockBuilder } from '@app/utils';\n\nimport './Banner.scss';\n\nconst getBlocksWith = createBemBlockBuilder(['banner']);\n\ninterface BannerProps {\n  title: string;\n  link?: string;\n  linkTitle?: string;\n  subtitle?: string;\n  dataGtm?: string;\n  children?: ReactNode;\n}\n\nexport const Banner: FC<BannerProps> = ({\n  title,\n  subtitle,\n  link,\n  linkTitle,\n  dataGtm,\n  children,\n}) => (\n  <div className={getBlocksWith()}>\n    <div className={getBlocksWith('__wrapper')}>\n      <div className={getBlocksWith('__inner')}>\n        <div className={getBlocksWith('__titles')}>\n          <div className={getBlocksWith('__title')}>{title}</div>\n          {subtitle && <div className={getBlocksWith('__subtitle')}>{subtitle}</div>}\n        </div>\n        {link && (\n          <div className={getBlocksWith('__btn-wrapper')}>\n            <Link\n              className=\"btn btn--primary btn--large\"\n              to={link}\n              {...(dataGtm && { 'data-gtm': dataGtm })}\n            >\n              {linkTitle}\n            </Link>\n          </div>\n        )}\n        {children}\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { FooterContent } from '@app/components/Layout';\nimport { SubscriptionForm } from '@app/components/SubscriptionForm';\nimport { Banner } from '@app/components/Banner';\nimport { createBemBlockBuilder } from '@app/utils';\n\nimport './SubscriptionBanner.scss';\n\nconst getBlocksWith = createBemBlockBuilder(['subscription-banner']);\n\nexport const SubscriptionBanner = () => {\n  return (\n    <FooterContent>\n      <div className={getBlocksWith()}>\n        <Banner\n          title=\"Stay in the know\"\n          subtitle=\"Get the latest ReportPortal news, product updates and articles via email\"\n        >\n          <SubscriptionForm />\n        </Banner>\n      </div>\n    </FooterContent>\n  );\n};\n","import React, { FC } from 'react';\nimport { ArticlePreview } from '@app/components/ArticlePreview';\nimport { SubscriptionBanner } from '@app/components/SubscriptionBanner';\nimport { createBemBlockBuilder, BlogPostDto } from '@app/utils';\n\nimport './BlogPage.scss';\n\ninterface BlogPageProps {\n  visiblePosts: BlogPostDto[];\n  allPosts: BlogPostDto[];\n  loadMorePosts: () => void;\n}\n\nconst getBlocksWith = createBemBlockBuilder(['blog']);\n\nexport const BlogPage: FC<BlogPageProps> = ({ visiblePosts, allPosts, loadMorePosts }) => (\n  <>\n    <div className={getBlocksWith()}>\n      <div className=\"container\">\n        <h1 className={getBlocksWith('__title')}>Blog</h1>\n        <p className={getBlocksWith('__subtitle')}>Product updates, news and technology articles</p>\n        <ArticlePreview posts={visiblePosts} />\n        {visiblePosts.length < allPosts.length && (\n          <div className={getBlocksWith('__footer')}>\n            <button className=\"btn btn--outline btn--large\" onClick={loadMorePosts}>\n              Load more\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n    <SubscriptionBanner />\n  </>\n);\n","import React, { FC, useCallback, useState } from 'react';\nimport { PageProps, graphql } from 'gatsby';\nimport { Layout } from '@app/components/Layout';\nimport { BlogPage } from '@app/containers/BlogPage';\nimport { BlogPostsQueryDto, BlogPostDto, SEO_DATA } from '@app/utils';\n\nconst PAGE_SIZE = 9;\n\nconst BlogIndex: FC<PageProps<BlogPostsQueryDto>> = ({ data: { allContentfulBlogPost } }) => {\n  const { nodes: allPosts } = allContentfulBlogPost;\n\n  const [visiblePosts, setVisiblePosts] = useState<BlogPostDto[]>(allPosts.slice(0, PAGE_SIZE));\n\n  const loadMorePosts = useCallback(\n    () => setVisiblePosts(prevState => allPosts.slice(0, prevState.length + PAGE_SIZE)),\n    [allPosts],\n  );\n\n  return (\n    <Layout seoData={SEO_DATA.blog}>\n      <BlogPage visiblePosts={visiblePosts} allPosts={allPosts} loadMorePosts={loadMorePosts} />\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query BlogIndexQuery {\n    allContentfulBlogPost(sort: { date: DESC }) {\n      nodes {\n        id\n        slug\n        date(formatString: \"MMMM Do, YYYY\")\n        author\n        articleBody {\n          raw\n        }\n        title {\n          title\n        }\n        leadParagraph {\n          leadParagraph\n        }\n        category\n        featuredImage {\n          file {\n            url\n          }\n          description\n        }\n      }\n    }\n  }\n`;\n"],"names":["_path","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","props","xmlns","width","height","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","getBlocksWith","createBemBlockBuilder","ArticleAuthor","_ref","authorName","React","className","AuthorIcon","ArticlePreviewItem","_post$description","post","Link","to","slug","alt","featuredImage","description","src","file","url","category","title","raw","renderRichText","publishDate","Typography","Paragraph","ellipsis","rows","leadParagraph","author","ArticlePreview","posts","isEmpty","map","id","Banner","subtitle","link","linkTitle","dataGtm","children","SubscriptionBanner","FooterContent","SubscriptionForm","BlogPage","visiblePosts","allPosts","loadMorePosts","onClick","data","allContentfulBlogPost","nodes","setVisiblePosts","useState","slice","useCallback","prevState","Layout","seoData","SEO_DATA","blog"],"sourceRoot":""}