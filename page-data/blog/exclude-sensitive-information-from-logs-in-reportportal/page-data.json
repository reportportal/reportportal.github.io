{"componentChunkName":"component---src-templates-blog-post-blog-post-tsx","path":"/blog/exclude-sensitive-information-from-logs-in-reportportal","result":{"data":{"contentfulBlogPost":{"id":"b5bcf476-0e4f-522d-a78f-95a9f4cf7fe3","slug":"exclude-sensitive-information-from-logs-in-reportportal","industry":"Product","title":{"title":"Exclude sensitive information from logs in ReportPortal"},"seoTitle":null,"seoDescription":"Secure your logs with our test automation reporting dashboard.","featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/6T6w6SfEZEN93CI3ehFWdw/8387aeb7856cf111c926a1a3043fd4ae/ExcludeSensitiveLogs-icon.png"}},"date":"April 2, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When working with sensitive data in your application, it's important to protect it from unauthorized access. One key part of security is controlling how sensitive information appears in logs. In this article, we’ll explore how ReportPortal hides confidential data.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logging helps developers and testers understand how an application works, find errors, and track tests. However, logs can sometimes include sensitive details like API keys, passwords, or access tokens. This can be a security risk, so it’s important to know how to prevent such data from being exposed. To demonstrate filtering capabilities, we will be using the REST Assured logger in ReportPortal of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-java-rest-assured/releases/tag/5.3.9\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"version 5.3.9\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", since this version contains all the necessary functionality.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal ensures data security by:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Removing sensitive information from the \\\"Authorization\\\" header \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Filtering out confidential data from headers, URLs, and cookies \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Masking sensitive content in response bodies\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #1: Removing sensitive information from the \\\"Authorization\\\" header\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A while ago, the REST Assured logger in ReportPortal started supporting excluding sensitive information from blacklisted header configuration of REST Assured. You can do this by specific configuration of REST Assured: \\n`RestAssuredConfig.config().logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\"))`.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is a full example:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"import com.epam.reportportal.listeners.*; \\nimport com.epam.reportportal.restassured.ReportPortalRestAssuredLoggingFilter; \\nimport com.epam.reportportal.service.Launch; \\nimport io.restassured.RestAssured; \\nimport io.restassured.config.*; \\nimport org.testng.annotations.*; \\n \\nimport static java.util.Optional.ofNullable; \\n \\npublic class RestAssuredSimpleSanitizeTest { \\n   private static final RestAssuredConfig CONFIG = RestAssuredConfig.config() \\n         .logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\")); \\n    \\n  @BeforeClass \\n   public void setupRestAssured() { \\n      RestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples \\n      RestAssured.filters(new ReportPortalRestAssuredLoggingFilter(42, LogLevel.INFO)); \\n   } \\n    \\n  @Test \\n   public void simpleRestAssuredLoggingTest() { \\n      ListenerParameters parameters = ofNullable(Launch.currentLaunch()).map(Launch::getParameters) \\n            .orElseThrow(() -> new IllegalStateException(\\\"Launch is not started\\\")); \\n      RestAssured.given() \\n            .config(CONFIG) \\n            .header(\\\"Authorization\\\", \\\"Bearer \\\" + parameters.getApiKey()) \\n            .get(parameters.getBaseUrl() + \\\"/api/v1/\\\" + parameters.getProjectName() + \\\"/settings\\\") \\n            .then() \\n            .assertThat() \\n            .statusCode(200); \\n   } \\n} \",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is how it looks on ReportPortal:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"271yKZovVHZgXVbkFDZQfk\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So we see that the \\\"Authorization\\\" header is hidden in the logs, while other headers and request/response bodies are logged as usual. It's a step in the right direction for securing sensitive information in logs, but it can't be the complete solution. Modern API use cases almost always involve more complex sensitive data transfer cases, which require more sophisticated handling of sensitive data. Fortunately, ReportPortal provides additional converters and prettifiers that help exclude such data from logs.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #2: Removing sensitive information from headers, URL, and cookies\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Imagine you are testing a browser authorization mechanism, which involves HTTP request that includes sensitive information in the headers and URL, E.G. basic authorization header with client credentials and user credentials in the URL. And in response to the request server sets Cookies with the Session ID to authorize the browser, therefore Session ID should be also confidential. Let's see what we will have in logs in this case:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1tRTuLjRkjFdfrSkLHNkOe\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It doesn't look good, right? So, what can we do to hide this sensitive information? First, since all filers and converters are working both on request and response logs, we can use the same `blacklistHeader` method to hide \\\"Set-Cookie\\\" header in the response. But we still have to deal with URL credentials the request and separate Cookie logging in the response. For this purpose, ReportPortal provides `SanitizingUriConverter` converter, which removes passwords from URIs, and `SanitizingCookieConverter` converter, which removes Session IDs from cookies.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So our REST Assured configuration becomes like this:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"private static final RestAssuredConfig CONFIG = RestAssuredConfig.config() \\n        .logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\").blacklistHeader(\\\"Set-Cookie\\\")); \\n\",\"marks\":[{\"type\":\"italic\"},{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"And filter configuration is also a bit different:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"RestAssured.filters(new ReportPortalRestAssuredLoggingFilter( \\n      42, \\n        LogLevel.INFO, \\n        DefaultHttpHeaderConverter.INSTANCE, \\n        DefaultHttpHeaderConverter.INSTANCE, \\n        SanitizingCookieConverter.INSTANCE, \\n        SanitizingUriConverter.INSTANCE \\n )); \",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is how it looks on ReportPortal now:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1sPcHYodV8xvlYzqmcyyaN\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Way better!\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #3: Removing sensitive information from response body\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Let's look at another example, where we have a response body with sensitive information, which we want to hide from logs. For example, we are testing an oAuth 2.0 authorization flow, where we have a response body with an access token and refresh token. Here is how it looks like in logs:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"6hvZ1cPISBY1M0CAUo4dZu\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So here we see the following data which needs to be sanitized: Basic Authorization header, \\\"password\\\" form parameter, \\\"access_token\\\" and refresh_token\\\" fields in the response body. To shorten the configuration, we will use `SanitizingHttpHeaderConverter` class from ReportPortal libraries, which hides the \\\"Authorization\\\" header.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Next we need to step aside a bit to explain what Converter is and what is Prettifier in ReportPortal. Converter is a class that converts an object (Header, URI, Param) to a string, which then is logged to ReportPortal. Prettifier is a class that formats a string for better readability. Naturally, HTTP request/response parts such as Header, URI, Param and Cookie require converters, while Body requires prettifier.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So, form parameters pass through `DefaultFormParamConverter` converter to be logged, and `ReportPortalRestAssuredLoggingFilter` class allows to configure custom converter for form parameters, with which we can hide \\\"password\\\" parameter. Let's create this custom converter:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"private static final Function<Param, String> SANITIZING_PARAM_CONVERTER = new Function<>() { \\n   @Override \\n   public @Nullable String apply(@Nullable Param param) { \\n      return DefaultFormParamConverter.INSTANCE.apply(ofNullable(param).filter(p -> \\\"password\\\".equalsIgnoreCase(p.getName())) \\n            .map(p -> { \\n               Param newParam = p.clone(); \\n               newParam.setValue(\\\"<removed>\\\"); \\n               return newParam; \\n            }) \\n            .orElse(param)); \\n   } \\n}; \",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What we did here is we check if the parameter name is \\\"password\\\" (ignoring case) and if it is, we replace its value with \\\"<removed>\\\". Otherwise, we just return the parameter as is. We also then apply `DefaultFormParamConverter` to convert the resulting parameter to a string.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"With prettifiers it's a bit harder to configure, since `ReportPortalRestAssuredLoggingFilter` class has its own prettifier for every body type (JSON, XML, Text, etc.) and the class does not allow modifying them on the fly. So, we need to get all of them, create our own prettifier, which will use the original prettifier to format the body and replace the sensitive information with \\\"<removed>\\\" tag and then replace the original prettifier with our own. Here is how it looks like:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"@NotNull \\nprivate static Map<String, Function<String, String>> getUpdatedPrettifiersMap(@Nonnull Map<String, Function<String, String>> prettifiers) { \\n   Map<String, Function<String, String>> myPrettifiers = new HashMap<>(prettifiers); \\n   Function<String, String> jsonPrettifier = myPrettifiers.get(\\\"application/json\\\"); \\n   Function<String, String> jsonSanitizer = json -> jsonPrettifier.apply(json.replaceAll( \\n         \\\"access_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\n                    \\\"access_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\" \\n            ) \\n            .replaceAll(\\\"refresh_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\\"refresh_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\")); \\n   myPrettifiers.put(\\\"application/json\\\", jsonSanitizer); \\n   return myPrettifiers; \\n} \\n \\n@BeforeClass \\npublic void setupRestAssured() { \\n   RestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples \\n    ReportPortalRestAssuredLoggingFilter logger = new ReportPortalRestAssuredLoggingFilter( \\n         42, \\n            LogLevel.INFO, \\n            SanitizingHttpHeaderConverter.INSTANCE, \\n            DefaultHttpHeaderConverter.INSTANCE, \\n            DefaultCookieConverter.INSTANCE, \\n            DefaultUriConverter.INSTANCE, \\n            SANITIZING_PARAM_CONVERTER \\n    ); \\n   logger.setContentPrettifiers(getUpdatedPrettifiersMap(logger.getContentPrettifiers())); \\n   RestAssured.filters(logger); \\n} \\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nAnd here is how it looks like on ReportPortal:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"5cxAXSgFHeVEUQXIVULR6T\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Cool! Now we have covered all the cases of sensitive information exposure in logs. And to recap, here is the full test class:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"package com.epam.reportportal.example.testng.logback.logging.restassured;\\n\\nimport com.epam.reportportal.formatting.http.converters.*;\\nimport com.epam.reportportal.formatting.http.entities.Param;\\nimport com.epam.reportportal.listeners.*;\\nimport com.epam.reportportal.restassured.ReportPortalRestAssuredLoggingFilter;\\nimport com.epam.reportportal.service.Launch;\\nimport io.restassured.RestAssured;\\nimport org.testng.annotations.*;\\n\\nimport javax.annotation.*;\\nimport java.nio.charset.StandardCharsets;\\nimport java.util.Base64;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.function.Function;\\n\\nimport static java.util.Optional.ofNullable;\\n\\npublic class RestAssuredFormTest {\\n\\n\\tprivate static final Function<Param, String> SANITIZING_PARAM_CONVERTER = new Function<>() {\\n\\t\\t@Override\\n\\t\\tpublic @Nullable String apply(@Nullable Param param) {\\n\\t\\t\\treturn DefaultFormParamConverter.INSTANCE.apply(ofNullable(param).filter(p -> \\\"password\\\".equalsIgnoreCase(p.getName()))\\n\\t\\t\\t\\t\\t.map(p -> {\\n\\t\\t\\t\\t\\t\\tParam newParam = p.clone();\\n\\t\\t\\t\\t\\t\\tnewParam.setValue(\\\"<removed>\\\");\\n\\t\\t\\t\\t\\t\\treturn newParam;\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.orElse(param));\\n\\t\\t}\\n\\t};\\n\\n\\t@Nonnull\\n\\tprivate static Map<String, Function<String, String>> getUpdatedPrettifiersMap(@Nonnull Map<String, Function<String, String>> prettifiers) {\\n\\t\\tMap<String, Function<String, String>> myPrettifiers = new HashMap<>(prettifiers);\\n\\t\\tFunction<String, String> jsonPrettifier = myPrettifiers.get(\\\"application/json\\\");\\n\\t\\tFunction<String, String> jsonSanitizer = json -> jsonPrettifier.apply(json.replaceAll(\\n\\t\\t\\t\\t\\t\\t\\\"access_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\\"access_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\"\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t.replaceAll(\\\"refresh_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\\"refresh_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\"));\\n\\t\\tmyPrettifiers.put(\\\"application/json\\\", jsonSanitizer);\\n\\t\\treturn myPrettifiers;\\n\\t}\\n\\n\\t@BeforeClass\\n\\tpublic void setupRestAssured() {\\n\\t\\tRestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples\\n\\t\\tReportPortalRestAssuredLoggingFilter logger = new ReportPortalRestAssuredLoggingFilter(\\n\\t\\t\\t\\t42,\\n\\t\\t\\t\\tLogLevel.INFO,\\n\\t\\t\\t\\tSanitizingHttpHeaderConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultHttpHeaderConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultCookieConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultUriConverter.INSTANCE,\\n\\t\\t\\t\\tSANITIZING_PARAM_CONVERTER\\n\\t\\t);\\n\\t\\tlogger.setContentPrettifiers(getUpdatedPrettifiersMap(logger.getContentPrettifiers()));\\n\\t\\tRestAssured.filters(logger);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void restAssuredLoggingTest() {\\n\\t\\tListenerParameters parameters = ofNullable(Launch.currentLaunch()).map(Launch::getParameters)\\n\\t\\t\\t\\t.orElseThrow(() -> new IllegalStateException(\\\"Launch is not started\\\"));\\n\\t\\tRestAssured.given()\\n\\t\\t\\t\\t.header(\\\"Authorization\\\", \\\"Basic \\\" + Base64.getEncoder().encodeToString(\\\"ui:uiman\\\".getBytes(StandardCharsets.UTF_8)))\\n\\t\\t\\t\\t.formParam(\\\"username\\\", \\\"default\\\")\\n\\t\\t\\t\\t.formParam(\\\"password\\\", \\\"1q2w3e\\\")\\n\\t\\t\\t\\t.formParam(\\\"grant_type\\\", \\\"password\\\")\\n\\t\\t\\t\\t.post(parameters.getBaseUrl() + \\\"/uat/sso/oauth/token\\\")\\n\\t\\t\\t\\t.then()\\n\\t\\t\\t\\t.assertThat()\\n\\t\\t\\t\\t.statusCode(200);\\n\\t}\\n}\\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nIn this article, we explored how to protect sensitive information in logs when using ReportPortal and REST Assured logger. We covered three cases of sensitive information exposure in logs and how to handle them using ReportPortal's built-in functionality. `ReportPortalRestAssuredLoggingFilter` class has converters and prettifiers configuration which we can use and extend to cover our needs. We also learned how to create custom converters and prettifiers to handle specific cases of sensitive information exposure in logs.\",\"marks\":[],\"data\":{}}]}]}","references":[{"contentful_id":"271yKZovVHZgXVbkFDZQfk","__typename":"ContentfulAsset","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/271yKZovVHZgXVbkFDZQfk/1b13a5605c0169533cb1ef3ac213408d/ExcludeSensitiveLogs1.png?w=186&h=98&q=50&fm=webp 186w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/271yKZovVHZgXVbkFDZQfk/1b13a5605c0169533cb1ef3ac213408d/ExcludeSensitiveLogs1.png?w=372&h=196&q=50&fm=webp 372w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/271yKZovVHZgXVbkFDZQfk/1b13a5605c0169533cb1ef3ac213408d/ExcludeSensitiveLogs1.png?w=744&h=392&q=50&fm=webp 744w","sizes":"(min-width: 744px) 744px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/1n1nntnzoxp4/271yKZovVHZgXVbkFDZQfk/1b13a5605c0169533cb1ef3ac213408d/ExcludeSensitiveLogs1.png?w=744&h=392&q=50&fm=png","srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/271yKZovVHZgXVbkFDZQfk/1b13a5605c0169533cb1ef3ac213408d/ExcludeSensitiveLogs1.png?w=186&h=98&q=50&fm=png 186w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/271yKZovVHZgXVbkFDZQfk/1b13a5605c0169533cb1ef3ac213408d/ExcludeSensitiveLogs1.png?w=372&h=196&q=50&fm=png 372w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/271yKZovVHZgXVbkFDZQfk/1b13a5605c0169533cb1ef3ac213408d/ExcludeSensitiveLogs1.png?w=744&h=392&q=50&fm=png 744w","sizes":"(min-width: 744px) 744px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":744,"height":392},"description":"Hidden \"Authorization\" header in the logs"},{"contentful_id":"1tRTuLjRkjFdfrSkLHNkOe","__typename":"ContentfulAsset","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/1tRTuLjRkjFdfrSkLHNkOe/23a63fec392012c5455582bbb750bc82/ExcludeSensitiveLogs2.png?w=173&h=100&q=50&fm=webp 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1tRTuLjRkjFdfrSkLHNkOe/23a63fec392012c5455582bbb750bc82/ExcludeSensitiveLogs2.png?w=346&h=200&q=50&fm=webp 346w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1tRTuLjRkjFdfrSkLHNkOe/23a63fec392012c5455582bbb750bc82/ExcludeSensitiveLogs2.png?w=691&h=400&q=50&fm=webp 691w","sizes":"(min-width: 691px) 691px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/1n1nntnzoxp4/1tRTuLjRkjFdfrSkLHNkOe/23a63fec392012c5455582bbb750bc82/ExcludeSensitiveLogs2.png?w=691&h=400&q=50&fm=png","srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/1tRTuLjRkjFdfrSkLHNkOe/23a63fec392012c5455582bbb750bc82/ExcludeSensitiveLogs2.png?w=173&h=100&q=50&fm=png 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1tRTuLjRkjFdfrSkLHNkOe/23a63fec392012c5455582bbb750bc82/ExcludeSensitiveLogs2.png?w=346&h=200&q=50&fm=png 346w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1tRTuLjRkjFdfrSkLHNkOe/23a63fec392012c5455582bbb750bc82/ExcludeSensitiveLogs2.png?w=691&h=400&q=50&fm=png 691w","sizes":"(min-width: 691px) 691px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":691,"height":400},"description":"Session ID in the logs"},{"contentful_id":"1sPcHYodV8xvlYzqmcyyaN","__typename":"ContentfulAsset","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/1sPcHYodV8xvlYzqmcyyaN/be555f71a779612cbea31a6e1c0ff111/ExcludeSensitiveLogs3.png?w=173&h=103&q=50&fm=webp 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1sPcHYodV8xvlYzqmcyyaN/be555f71a779612cbea31a6e1c0ff111/ExcludeSensitiveLogs3.png?w=345&h=206&q=50&fm=webp 345w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1sPcHYodV8xvlYzqmcyyaN/be555f71a779612cbea31a6e1c0ff111/ExcludeSensitiveLogs3.png?w=690&h=412&q=50&fm=webp 690w","sizes":"(min-width: 690px) 690px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/1n1nntnzoxp4/1sPcHYodV8xvlYzqmcyyaN/be555f71a779612cbea31a6e1c0ff111/ExcludeSensitiveLogs3.png?w=690&h=412&q=50&fm=png","srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/1sPcHYodV8xvlYzqmcyyaN/be555f71a779612cbea31a6e1c0ff111/ExcludeSensitiveLogs3.png?w=173&h=103&q=50&fm=png 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1sPcHYodV8xvlYzqmcyyaN/be555f71a779612cbea31a6e1c0ff111/ExcludeSensitiveLogs3.png?w=345&h=206&q=50&fm=png 345w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/1sPcHYodV8xvlYzqmcyyaN/be555f71a779612cbea31a6e1c0ff111/ExcludeSensitiveLogs3.png?w=690&h=412&q=50&fm=png 690w","sizes":"(min-width: 690px) 690px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":690,"height":412},"description":"Hidden Session ID in the logs"},{"contentful_id":"6hvZ1cPISBY1M0CAUo4dZu","__typename":"ContentfulAsset","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/6hvZ1cPISBY1M0CAUo4dZu/6d0a25331047afb6011a8630a50ba992/ExcludeSensitiveLogs4.png?w=173&h=188&q=50&fm=webp 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/6hvZ1cPISBY1M0CAUo4dZu/6d0a25331047afb6011a8630a50ba992/ExcludeSensitiveLogs4.png?w=345&h=376&q=50&fm=webp 345w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/6hvZ1cPISBY1M0CAUo4dZu/6d0a25331047afb6011a8630a50ba992/ExcludeSensitiveLogs4.png?w=690&h=751&q=50&fm=webp 690w","sizes":"(min-width: 690px) 690px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/1n1nntnzoxp4/6hvZ1cPISBY1M0CAUo4dZu/6d0a25331047afb6011a8630a50ba992/ExcludeSensitiveLogs4.png?w=690&h=751&q=50&fm=png","srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/6hvZ1cPISBY1M0CAUo4dZu/6d0a25331047afb6011a8630a50ba992/ExcludeSensitiveLogs4.png?w=173&h=188&q=50&fm=png 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/6hvZ1cPISBY1M0CAUo4dZu/6d0a25331047afb6011a8630a50ba992/ExcludeSensitiveLogs4.png?w=345&h=376&q=50&fm=png 345w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/6hvZ1cPISBY1M0CAUo4dZu/6d0a25331047afb6011a8630a50ba992/ExcludeSensitiveLogs4.png?w=690&h=751&q=50&fm=png 690w","sizes":"(min-width: 690px) 690px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":690,"height":751},"description":"Sensitive information in the response body"},{"contentful_id":"5cxAXSgFHeVEUQXIVULR6T","__typename":"ContentfulAsset","gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/5cxAXSgFHeVEUQXIVULR6T/206e23013e8dd8a8f8bc9dadf0b0821a/ExcludeSensitiveLogs5.png?w=173&h=163&q=50&fm=webp 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/5cxAXSgFHeVEUQXIVULR6T/206e23013e8dd8a8f8bc9dadf0b0821a/ExcludeSensitiveLogs5.png?w=346&h=325&q=50&fm=webp 346w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/5cxAXSgFHeVEUQXIVULR6T/206e23013e8dd8a8f8bc9dadf0b0821a/ExcludeSensitiveLogs5.png?w=691&h=650&q=50&fm=webp 691w","sizes":"(min-width: 691px) 691px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/1n1nntnzoxp4/5cxAXSgFHeVEUQXIVULR6T/206e23013e8dd8a8f8bc9dadf0b0821a/ExcludeSensitiveLogs5.png?w=691&h=650&q=50&fm=png","srcSet":"https://images.ctfassets.net/1n1nntnzoxp4/5cxAXSgFHeVEUQXIVULR6T/206e23013e8dd8a8f8bc9dadf0b0821a/ExcludeSensitiveLogs5.png?w=173&h=163&q=50&fm=png 173w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/5cxAXSgFHeVEUQXIVULR6T/206e23013e8dd8a8f8bc9dadf0b0821a/ExcludeSensitiveLogs5.png?w=346&h=325&q=50&fm=png 346w,\nhttps://images.ctfassets.net/1n1nntnzoxp4/5cxAXSgFHeVEUQXIVULR6T/206e23013e8dd8a8f8bc9dadf0b0821a/ExcludeSensitiveLogs5.png?w=691&h=650&q=50&fm=png 691w","sizes":"(min-width: 691px) 691px, 100vw"}},"layout":"constrained","backgroundColor":"#f8f8f8","width":691,"height":650},"description":"Hidden sensitive information in the response body"}]}}},"pageContext":{"slug":"exclude-sensitive-information-from-logs-in-reportportal"}},"staticQueryHashes":["1130895138","2991584196","520980492"],"slicesMap":{}}