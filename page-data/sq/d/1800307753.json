{"data":{"allContentfulBlogPost":{"nodes":[{"id":"5fe65da7-9410-53aa-9d36-54e37ce4a4b6","date":"June 4th, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In any software project, things move fast – builds run, tests execute, bugs pop up. Without a way to stay informed, it’s easy to miss something important or waste time checking dashboards and logs.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"That’s where notifications come in. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If you want to stay updated on test results without constantly checking ReportPortal, notifications are the way to go. They let you know when tests finish, encounter issues, or have \\\"To Investigate\\\" items – sent directly to your email, Slack, or Telegram. ReportPortal supports these channels through \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/plugins/notifications/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"notification plugins\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". You can also \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/developers-guides/PluginDevelopersGuide/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"develop your custom notification plugin\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" and set up an integration with any other notification tool of your choice, such as Microsoft Teams, WhatsApp, and more.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Benefits of using notifications\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"1. Faster reactions\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nYou get updates right away when something breaks or finishes – no need to constantly check the dashboard. This means issues get noticed and fixed quicker.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"2. Everyone's on the same page\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nNotifications go straight to tools your team already uses – like email, Slack, or Telegram – so developers, testers, and managers all stay in the loop.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"3. Less time wasted\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nBy spotting issues early, teams can jump in and solve them before they block progress or turn into bigger problems.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"4. More visibility\\n\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"You don’t have to dig through logs or open ReportPortal every time – notifications keep you updated on what’s going on with your tests.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Notification plugins in ReportPortal\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal offers three types of notifications: \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Email Server \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Slack \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Telegram\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"1. Email Server\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Characteristics:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Built-in support for sending updates to any email address.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Ideal for formal reporting and escalations.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Supports multiple recipients.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Best for:\\n\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Stakeholders who prefer structured, inbox-based updates and want a reliable way to archive notifications.\\n\\n\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/plugins/notifications/EmailServer\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Setup Guide\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"2. Slack\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Characteristics:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Real-time alerts pushed directly into Slack channels.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Supports tagging of team members.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Easily integrates with team collaboration channels.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Best for:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nAgile teams using Slack for day-to-day collaboration, who stay in sync thanks to instant updates in shared workspaces.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/plugins/notifications/Slack\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Setup Guide\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"3. Telegram\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Characteristics:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Fast and simple notification delivery via bots.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Alerts are accessible on any device without needing to log in.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Best for:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nRemote teams or anyone who needs updates on the go.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/plugins/notifications/Telegram\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Setup Guide\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Turning on notifications in ReportPortal helps your team stay on track, respond quickly, and keep the quality high in every release. Whether you’re using email, Slack, or Telegram to get updates, these tools make your QA process faster and more efficient.\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Speed up your QA process with smart notifications in ReportPortal"},"leadParagraph":{"leadParagraph":"In any software project, things move fast – builds run, tests execute, bugs pop up. Without a way to stay informed, it’s easy to miss something important or waste time checking dashboards and logs."},"category":["Integrations"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/3SOwvGv3iy9sV4x4z1zyvM/0af5ddf84375acb08d16a91fde6cff3a/Notifications-icon.png"}},"slug":"speed-up-your-qa-process-with-smart-notifications-in-reportportal"},{"id":"62981256-4cec-5768-990b-e24d8d44d0df","date":"May 22nd, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Standard \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/work-with-reports/InvestigationOfFailure#set-defect-type\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"defect types\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" like \\\"Product Bug\\\" or \\\"Automation Bug\\\" are helpful, but sometimes they just don’t tell the full story. That’s where custom defect types come in. They let you be more specific about what went wrong and who should investigate it. During defect triage, this can really save time – no need to figure out what type of defect it is (for example, \\\"Java Migration Issue\\\" or \\\"Not Implemented\\\"). You can mark issues that need investigation, flag known third-party problems, or highlight test failures that aren’t actually bugs.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Thanks to custom defect types, you can highlight trends and product areas where defects were occurring. For example, in the screenshot below, you can see how failures are distributed across the main defect type groups. You can also observe that the number of Product Bugs decreases with each run, while the number of Automation Bugs increases – however, in the latest launch, all tests passed.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"2QCd1KEg7PA6dp1c5zpvMs\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"And in the screenshot below, you can see the distribution of Product Bugs by custom defect types, which helps focus attention where it’s most needed. For example, most of the issues are related to Checkout.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"3HGgbLxxql4jVhOyRKmoKd\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Look at the examples below to see how custom defect types can make issue handling faster, clearer, and more organized. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Custom \\\"To Investigate\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\\nWe recommend using these custom defect types during the defect triage process when you need \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"to assign someone to investigate a failed test\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". The idea is to make it clear who is responsible for inspecting the issue.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s say you are dealing with a common \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"third-party billing problem\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Create a custom defect type \\\"Billing Vendor\\\" within \\\"To Investigate\\\" issue type specifically for this case and notify the vendor. This shows the failure has already been passed on to another team, and now you are waiting for their input.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Using this approach helps everyone stay on the same page, especially management. It is immediately obvious that the failure is not just sitting there unassigned – someone is already on it.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Once the root cause is known, the issue can be reclassified into its final state: System Issue, Product Bug, Automation Bug, or No Defect.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Examples:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" Third-party Billing, Third-party API – Pending Analysis, Issue for James Cooper, To Clarify, QA Investigate, Dev Team Investigate.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Custom \\\"No Defect\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Not every test failure is the result of a bug. Take this example: the billing service was down for planned maintenance during your test run. The vendor had notified you in advance, but your tests were still scheduled and ran anyway – of course they failed, but the reason is known.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In this case, you can create and use a custom type like\",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \\\"Third-party Maintenance\\\"\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" under the \\\"No Defect\\\" group. It helps your issue statistics clean and accurate.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Other useful types in this group: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\\"Manually Passed\\\" \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"or \\\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Passed Locally\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\\" – for those times when a test fails in CI but passes just fine on your machine.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Examples:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" Third-party Maintenance, Manually Passed, Passed Locally, Aborted, Interrupted.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Custom \\\"System Issue\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"System Issues are often symptoms of deeper problems. For example, you might be unable to run some tests because the third-party vendor hasn’t provided a stable test environment.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Custom \\\"System Issue\\\" defect types help you track recurring problems like this. Instead of having to explain every week that 50 tests failed due an unstable vendor environment – and spending 10+ hours re-running them – you’ll have hard data to show where the time is going. Just create a custom \\\"Billing Env Unstable\\\" defect type and then build an \\\"Overall Statistics\\\" widget.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In the screenshot below, you can see the distribution of failures by defect types, with most of the issues related to \\\"Billing Env Unstable\\\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"7okC9WUqcgfA30DBzBaHbB\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Sometimes the problem isn’t with the third-party vendor, but with another internal team. For example, you might be developing the Product Catalog while a neighboring team is working on the Shopping Cart. If your tests that verify adding items to the cart start failing, create a custom \\\"Cross-Team Integration Issue\\\" defect type to tag these cases and discuss with the team responsible for that part of the functionality how to stabilize your tests.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Examples:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" Billing Env Unstable, Cross-Team Integration Issue, Loading Issue, Performance Issue, Integration Issue, Platform Issue, Email Configuration.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Custom \\\"Automation Bug\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Custom \\\"Automation Bug\\\" defect types help break down what exactly went wrong on the automation side. Not every automation bug is caused by bad test logic. Sometimes the test environment is causing problems – performance issues, flaky services, etc. In situations like that, use a custom defect type that reflects it properly.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Or maybe the test itself is outdated. Before/after methods no longer work, credentials have changed, or the test data needs a refresh. In that case, a specific type like \\\"Outdated Test\\\" or \\\"Invalid Test Data\\\" makes things easier to track. If test data is a regular headache, you might want to look at \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://tdspora.ai/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"TDspora\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Examples:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" Performance Issue in CI, Outdated Test, Invalid Test Data, Test Script Issue, Framework Issue, Postman Issue, Under Review for Resolution, Flakу Test.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Custom \\\"Product Bug\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Use a custom \\\"Product Bug\\\" defect type to specify which component is affected, such as \\\"Signup Issue\\\" or \\\"Checkout\\\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This approach works well if you just need to quickly find failed test cases for a specific component and fix them as a priority. But if you have a lot of components and need to prepare a report for the Quality Manager, it might not be the most efficient way. That’s why we also recommend adding components as attributes and using the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ComponentHealthCheck\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"\\\"Component Health Check\\\"\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" widget for deeper analysis.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Also, use these custom defect types to indicate who is responsible for fixing the bug. If you’re blocked while waiting for a third-party vendor to complete their part, be sure to label it clearly – for example, \\\"Waiting for Vendor\\\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Examples: \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Backend Issue, Waiting for Vendor, Signup Issue, Checkout, Billing Feature, Interface Issue, Known Issue.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In short, custom defect types make the whole debugging process a lot smoother. They help keep everyone aligned and make your data more useful for analysis. \",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Custom Defect Types: The Game-Changer for Bug Categorization"},"leadParagraph":{"leadParagraph":"Standard defect types like \"Product Bug\" or \"Automation Bug\" are helpful, but sometimes they just don’t tell the full story. That’s where custom defect types come in. "},"category":["Product"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/7cTkJvaYTpkZnqL1erNTRs/6439ed57508f58fb20428bfaba200d2d/CustomDefectType-icon.png"}},"slug":"custom-defect-types-the-game-changer-for-bug-categorization"},{"id":"3f9bd0f3-9a38-5229-b624-f596a564d767","date":"May 8th, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If you are using the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reqnroll.net/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Reqnroll\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" test framework for automation and want to track test results on the fly, integrating it with ReportPortal is a great choice.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To set this up, simply install the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/agent-dotnet-reqnroll\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal.Reqnroll\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" NuGet package in your project containing the test scenarios. This package acts as an agent between Reqnroll and ReportPortal, automatically streaming test outcomes as they run, allowing you to monitor execution without waiting for the entire test suite to finish.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In this article, we’ll explore how to integrate the Reqnroll test framework with ReportPortal using our agent. You’ll learn how to install and configure the Reqnroll agent, execute tests, and enrich them with logs, attachments, and nested steps. Once integrated, your test results will be automatically sent to ReportPortal, allowing you to monitor them in real time and generate a Reqnroll test report to extract valuable insights into test execution across your projects.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Installing the Reqnroll Agent\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To install \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ReportPortal.Reqnroll\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" package, execute the following command:  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"```cmd \\ndotnet add package ReportPortal.Reqnroll \\n``` \",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This will add the necessary dependencies to your project, enabling seamless communication with the ReportPortal server.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Configuration of the Agent\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Once the agent is installed, you need to configure it to communicate with your ReportPortal server. This is done by adding a `ReportPortal.json` file to your test project. Ensure that the file's property `Copy to Output Directory` is set to `Copy if newer`.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is an example of a `ReportPortal.json` configuration file:  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"```json \\n{ \\n  \\\"$schema\\\": \\\"https://raw.githubusercontent.com/reportportal/agent-dotnet-reqnroll/master/src/ReportPortal.ReqnrollPlugin/ReportPortal.config.schema\\\", \\n  \\\"server\\\": { \\n    \\\"url\\\": \\\" https://demo.reportportal.io\\\", \\n    \\\"project\\\": \\\"default_project\\\", \\n    \\\"apiKey\\\": \\\" RnR_Ws6Qrrl1TE6AmqdgqKoKeQNs0dgkd5bcqLkM9p0O_YDnOfP4VEzN7WIyyn5C0c14\\\" \\n  }, \\n  \\\"launch\\\": { \\n    \\\"name\\\": \\\"Reqnroll Demo Launch\\\", \\n    \\\"description\\\": \\\"this is description\\\", \\n    \\\"attributes\\\": [ \\\"t1\\\", \\\"os:win10\\\" ] \\n  } \\n} \\n``` \",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Key Configuration Properties:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`server.url`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The URL of your ReportPortal server, including the protocol (e.g., `https://rp.epam.com`).\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`server.project`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The name of the project in ReportPortal where the test results will be reported.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`server.apiKey`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The API key for authenticating with the ReportPortal server. You can find this in your user profile on the ReportPortal UI.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`launch.name`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The name of the test launch.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`launch.description`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": A brief description of the test launch.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`launch.attributes`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": Custom attributes for the launch, such as tags or metadata. \",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Descriptions and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/log-data-in-reportportal/HowToReportAttributesToReportPortal/#net\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"attributes\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" can be used to specify additional information about the test launch or individual test cases. For making the most out of attributes, have a look at the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/work-with-reports/LaunchesTestItemsAttributes/#best-practices-for-using-attributes\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"best practices\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". Attributes also can be helpful for filtering test results and building widgets like \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ComponentHealthCheck\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"\\\"Component Health Check\\\"\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"For advanced configurations, such as environment variables, directory sources, or HTTP settings (e.g., proxy, timeout, retries), refer to the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/client-dotnet/blob/develop/docs/Configuration.md\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"official documentation\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Adding Logs to Reqnroll Test Results \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logs provide detailed information about test execution, including errors, warnings, and debug information.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To add logs:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Configure the logging framework in your project. \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Use the logging framework's API to capture logs during test execution and send them to ReportPortal.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can integrate one of the next logging frameworks:  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-net-nlog\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"NLog\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-net-log4net\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"log4net\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-net-serilog\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Serilog\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Example (using Serilog):\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Log.Information(\\\"Test started\\\");\\nLog.Error(\\\"An error occurred during test execution\\\");\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logs will appear in ReportPortal under the test item details. \\n \\nMore details on \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/client-dotnet/blob/develop/docs/Logging.md\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"logging enhancements\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" (including attachments and nested steps).\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Running Reqnroll Tests\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"After configuring the agent, you can execute your Reqnroll tests as usual. The agent will automatically capture the test results and send them to the configured ReportPortal server.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"21JNFDHi2ECJ1YLecglRYv\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Monitoring Reqnroll Test Results in ReportPortal\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Following these steps, you can enhance your Reqnroll integration with ReportPortal and take full advantage of its advanced reporting capabilities. ReportPortal provides detailed \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/blog/test-results-visualization\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"visualization\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" of your automation workflow, enabling you to monitor \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ReportingAndMetricsInReportPortal/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"test automation metrics\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", generate reports, and assess the stability of your project.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Useful links:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/agent-dotnet-reqnroll\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Agent documentation\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/log-data-in-reportportal/test-framework-integration/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Other available integrations\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Reporting Reqnroll test results to ReportPortal"},"leadParagraph":{"leadParagraph":"If you are using the Reqnroll test framework for automation and want to track test results on the fly, integrating it with ReportPortal is a great choice."},"category":["Integrations"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/54cidfRUWApi7DnGccmbjE/c1d3823c5f31f62f956d6b7a4cf7b089/Reqnroll-icon.png"}},"slug":"reporting-reqnroll-test-results-to-reportportal"}]}}}