{"data":{"allContentfulBlogPost":{"nodes":[{"id":"3f9bd0f3-9a38-5229-b624-f596a564d767","date":"May 8th, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If you are using the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reqnroll.net/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Reqnroll\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" test framework for automation and want to track test results on the fly, integrating it with ReportPortal is a great choice.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To set this up, simply install the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/agent-dotnet-reqnroll\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal.Reqnroll\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" NuGet package in your project containing the test scenarios. This package acts as an agent between Reqnroll and ReportPortal, automatically streaming test outcomes as they run, allowing you to monitor execution without waiting for the entire test suite to finish.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In this article, we’ll explore how to integrate the Reqnroll test framework with ReportPortal using our agent. You’ll learn how to install and configure the Reqnroll agent, execute tests, and enrich them with logs, attachments, and nested steps. Once integrated, your test results will be automatically sent to ReportPortal, allowing you to monitor them in real time and generate a Reqnroll test report to extract valuable insights into test execution across your projects.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Installing the Reqnroll Agent\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To install \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ReportPortal.Reqnroll\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" package, execute the following command:  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"```cmd \\ndotnet add package ReportPortal.Reqnroll \\n``` \",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This will add the necessary dependencies to your project, enabling seamless communication with the ReportPortal server.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Configuration of the Agent\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Once the agent is installed, you need to configure it to communicate with your ReportPortal server. This is done by adding a `ReportPortal.json` file to your test project. Ensure that the file's property `Copy to Output Directory` is set to `Copy if newer`.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is an example of a `ReportPortal.json` configuration file:  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"```json \\n{ \\n  \\\"$schema\\\": \\\"https://raw.githubusercontent.com/reportportal/agent-dotnet-reqnroll/master/src/ReportPortal.ReqnrollPlugin/ReportPortal.config.schema\\\", \\n  \\\"server\\\": { \\n    \\\"url\\\": \\\" https://demo.reportportal.io\\\", \\n    \\\"project\\\": \\\"default_project\\\", \\n    \\\"apiKey\\\": \\\" RnR_Ws6Qrrl1TE6AmqdgqKoKeQNs0dgkd5bcqLkM9p0O_YDnOfP4VEzN7WIyyn5C0c14\\\" \\n  }, \\n  \\\"launch\\\": { \\n    \\\"name\\\": \\\"Reqnroll Demo Launch\\\", \\n    \\\"description\\\": \\\"this is description\\\", \\n    \\\"attributes\\\": [ \\\"t1\\\", \\\"os:win10\\\" ] \\n  } \\n} \\n``` \",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Key Configuration Properties:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`server.url`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The URL of your ReportPortal server, including the protocol (e.g., `https://rp.epam.com`).\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`server.project`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The name of the project in ReportPortal where the test results will be reported.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`server.apiKey`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The API key for authenticating with the ReportPortal server. You can find this in your user profile on the ReportPortal UI.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`launch.name`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": The name of the test launch.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`launch.description`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": A brief description of the test launch.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"`launch.attributes`\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\": Custom attributes for the launch, such as tags or metadata. \",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Descriptions and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/log-data-in-reportportal/HowToReportAttributesToReportPortal/#net\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"attributes\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" can be used to specify additional information about the test launch or individual test cases. For making the most out of attributes, have a look at the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/work-with-reports/LaunchesTestItemsAttributes/#best-practices-for-using-attributes\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"best practices\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". Attributes also can be helpful for filtering test results and building widgets like \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ComponentHealthCheck\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"\\\"Component Health Check\\\"\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"For advanced configurations, such as environment variables, directory sources, or HTTP settings (e.g., proxy, timeout, retries), refer to the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/client-dotnet/blob/develop/docs/Configuration.md\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"official documentation\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Adding Logs to Reqnroll Test Results \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logs provide detailed information about test execution, including errors, warnings, and debug information.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To add logs:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Configure the logging framework in your project. \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Use the logging framework's API to capture logs during test execution and send them to ReportPortal.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can integrate one of the next logging frameworks:  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-net-nlog\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"NLog\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-net-log4net\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"log4net\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-net-serilog\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Serilog\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Example (using Serilog):\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Log.Information(\\\"Test started\\\");\\nLog.Error(\\\"An error occurred during test execution\\\");\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logs will appear in ReportPortal under the test item details. \\n \\nMore details on \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/client-dotnet/blob/develop/docs/Logging.md\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"logging enhancements\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" (including attachments and nested steps).\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Running Reqnroll Tests\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"After configuring the agent, you can execute your Reqnroll tests as usual. The agent will automatically capture the test results and send them to the configured ReportPortal server.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"21JNFDHi2ECJ1YLecglRYv\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Monitoring Reqnroll Test Results in ReportPortal\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Following these steps, you can enhance your Reqnroll integration with ReportPortal and take full advantage of its advanced reporting capabilities. ReportPortal provides detailed \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/blog/test-results-visualization\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"visualization\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" of your automation workflow, enabling you to monitor \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ReportingAndMetricsInReportPortal/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"test automation metrics\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", generate reports, and assess the stability of your project.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Useful links:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/agent-dotnet-reqnroll\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Agent documentation\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/log-data-in-reportportal/test-framework-integration/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Other available integrations\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Reporting Reqnroll test results to ReportPortal"},"leadParagraph":{"leadParagraph":"If you are using the Reqnroll test framework for automation and want to track test results on the fly, integrating it with ReportPortal is a great choice."},"category":["Integrations"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/54cidfRUWApi7DnGccmbjE/c1d3823c5f31f62f956d6b7a4cf7b089/Reqnroll-icon.png"}},"slug":"reporting-reqnroll-test-results-to-reportportal"},{"id":"e0742c5a-0c54-5879-b4de-3d49ee4758e4","date":"April 17th, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In the software world, two roles are key to making sure products work well: testers and quality engineers (QEs). These roles might sound similar, but they’re quite different. If you’re part of a team or planning a career in tech, it’s helpful to know what sets these jobs apart.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This article breaks down what testers and quality engineers do and how they work together to create great software.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Roles and responsibilities\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Testers\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" are hands-on with the product. They focus on running tests to find issues. Here’s what they usually do:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Create and run manual or automated tests.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Find and report bugs with clear steps for developers to follow.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Test fixes to make sure they didn’t break other parts of the software.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Work with developers to understand how features are supposed to work.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Testers are like detectives for software — they’re looking for anything that’s not working right.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Quality Engineers\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" take things a step further. They work on making sure the whole process of building software is solid. Here’s what they do:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Build systems to automate testing.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Add tests to tools that run automatically during development.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Test how the software handles heavy use, security risks, or big data.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Teach teams better ways to code, test, and release software.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"QEs usually have strong technical skills, like coding, and focus on preventing problems before they start.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The big difference\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is their focus:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Testers look for problems in the software that already exists.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Quality engineers build systems and processes to avoid problems in the first place.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Tester or quality engineer: what’s your role?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Does it matter if you’re called a tester or a quality engineer? It does — because your job title often shows what your main goal is.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A tester’s work is task-focused, while quality engineers take a more mission-driven approach. The goal of a tester is to ensure the quality of the product (and log bugs when necessary). In contrast, the goal of a quality engineer is to design and develop the process or approach.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How ReportPortal supports the QA process\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal supports not only testers and quality engineers but also professionals across various roles in the quality assurance and development process. It’s equally valuable for management roles (Test Manager, Project Manager, Development Manager, Portfolio Manager), technical roles (Quality Assurance Automation Engineer, Quality Assurance Engineer, Software Engineer in Test), and strategy roles (Quality Assurance Lead, Quality Assurance Architect).\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"By providing real-time insights, widgets for tracking \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ReportingAndMetricsInReportPortal/#qa-and-test-automation-metrics-in-reportportal\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"QA and test automation metrics\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", and seamless integration with \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/log-data-in-reportportal/test-framework-integration/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"test frameworks\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/quality-gates/IntegrationWithCICD/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"CI/CD tools\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", ReportPortal empowers teams to collaborate effectively, streamline processes, and deliver high-quality software – no matter the role or responsibility.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Additionally, ReportPortal offers the following services to elevate software quality:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/testing-as-a-service\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Testing as a Service (TaaS)\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/test-automation-as-a-service\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Test Automation as a Service (TAaaS)\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/qe-consulting\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Quality Engineering Consulting\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Whether you see yourself as a tester or a quality engineer, remember that both roles share the same ultimate mission: to ensure the best possible experience for users. What matters most is not the title, but the impact you make.\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Tester vs Quality Engineer: what’s the difference?"},"leadParagraph":{"leadParagraph":"In the software world, two roles are key to making sure products work well: testers and quality engineers (QEs). These roles might sound similar, but they’re quite different. If you’re part of a team or planning a career in tech, it’s helpful to know what sets these jobs apart."},"category":["Other"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/rgdTQqgYWSZeSVx2KvhGr/d606741c07ada3a59d34138e79251ced/TesterVsQE.jpg"}},"slug":"tester-vs-quality-engineer-whats-the-difference"},{"id":"b5bcf476-0e4f-522d-a78f-95a9f4cf7fe3","date":"April 2nd, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When working with sensitive data in your application, it's important to protect it from unauthorized access. One key part of security is controlling how sensitive information appears in logs. In this article, we’ll explore how ReportPortal hides confidential data.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logging helps developers and testers understand how an application works, find errors, and track tests. However, logs can sometimes include sensitive details like API keys, passwords, or access tokens. This can be a security risk, so it’s important to know how to prevent such data from being exposed. To demonstrate filtering capabilities, we will be using the REST Assured logger in ReportPortal of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-java-rest-assured/releases/tag/5.3.9\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"version 5.3.9\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", since this version contains all the necessary functionality.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal ensures data security by:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Removing sensitive information from the \\\"Authorization\\\" header \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Filtering out confidential data from headers, URLs, and cookies \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Masking sensitive content in response bodies\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #1: Removing sensitive information from the \\\"Authorization\\\" header\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A while ago, the REST Assured logger in ReportPortal started supporting excluding sensitive information from blacklisted header configuration of REST Assured. You can do this by specific configuration of REST Assured: \\n`RestAssuredConfig.config().logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\"))`.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is a full example:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"import com.epam.reportportal.listeners.*; \\nimport com.epam.reportportal.restassured.ReportPortalRestAssuredLoggingFilter; \\nimport com.epam.reportportal.service.Launch; \\nimport io.restassured.RestAssured; \\nimport io.restassured.config.*; \\nimport org.testng.annotations.*; \\n \\nimport static java.util.Optional.ofNullable; \\n \\npublic class RestAssuredSimpleSanitizeTest { \\n   private static final RestAssuredConfig CONFIG = RestAssuredConfig.config() \\n         .logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\")); \\n    \\n  @BeforeClass \\n   public void setupRestAssured() { \\n      RestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples \\n      RestAssured.filters(new ReportPortalRestAssuredLoggingFilter(42, LogLevel.INFO)); \\n   } \\n    \\n  @Test \\n   public void simpleRestAssuredLoggingTest() { \\n      ListenerParameters parameters = ofNullable(Launch.currentLaunch()).map(Launch::getParameters) \\n            .orElseThrow(() -> new IllegalStateException(\\\"Launch is not started\\\")); \\n      RestAssured.given() \\n            .config(CONFIG) \\n            .header(\\\"Authorization\\\", \\\"Bearer \\\" + parameters.getApiKey()) \\n            .get(parameters.getBaseUrl() + \\\"/api/v1/\\\" + parameters.getProjectName() + \\\"/settings\\\") \\n            .then() \\n            .assertThat() \\n            .statusCode(200); \\n   } \\n} \",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is how it looks on ReportPortal:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"271yKZovVHZgXVbkFDZQfk\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So we see that the \\\"Authorization\\\" header is hidden in the logs, while other headers and request/response bodies are logged as usual. It's a step in the right direction for securing sensitive information in logs, but it can't be the complete solution. Modern API use cases almost always involve more complex sensitive data transfer cases, which require more sophisticated handling of sensitive data. Fortunately, ReportPortal provides additional converters and prettifiers that help exclude such data from logs.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #2: Removing sensitive information from headers, URL, and cookies\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Imagine you are testing a browser authorization mechanism, which involves HTTP request that includes sensitive information in the headers and URL, E.G. basic authorization header with client credentials and user credentials in the URL. And in response to the request server sets Cookies with the Session ID to authorize the browser, therefore Session ID should be also confidential. Let's see what we will have in logs in this case:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1tRTuLjRkjFdfrSkLHNkOe\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It doesn't look good, right? So, what can we do to hide this sensitive information? First, since all filers and converters are working both on request and response logs, we can use the same `blacklistHeader` method to hide \\\"Set-Cookie\\\" header in the response. But we still have to deal with URL credentials the request and separate Cookie logging in the response. For this purpose, ReportPortal provides `SanitizingUriConverter` converter, which removes passwords from URIs, and `SanitizingCookieConverter` converter, which removes Session IDs from cookies.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So our REST Assured configuration becomes like this:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"private static final RestAssuredConfig CONFIG = RestAssuredConfig.config() \\n        .logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\").blacklistHeader(\\\"Set-Cookie\\\")); \\n\",\"marks\":[{\"type\":\"italic\"},{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"And filter configuration is also a bit different:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"RestAssured.filters(new ReportPortalRestAssuredLoggingFilter( \\n      42, \\n        LogLevel.INFO, \\n        DefaultHttpHeaderConverter.INSTANCE, \\n        DefaultHttpHeaderConverter.INSTANCE, \\n        SanitizingCookieConverter.INSTANCE, \\n        SanitizingUriConverter.INSTANCE \\n )); \",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is how it looks on ReportPortal now:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1sPcHYodV8xvlYzqmcyyaN\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Way better!\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #3: Removing sensitive information from response body\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Let's look at another example, where we have a response body with sensitive information, which we want to hide from logs. For example, we are testing an oAuth 2.0 authorization flow, where we have a response body with an access token and refresh token. Here is how it looks like in logs:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"6hvZ1cPISBY1M0CAUo4dZu\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So here we see the following data which needs to be sanitized: Basic Authorization header, \\\"password\\\" form parameter, \\\"access_token\\\" and refresh_token\\\" fields in the response body. To shorten the configuration, we will use `SanitizingHttpHeaderConverter` class from ReportPortal libraries, which hides the \\\"Authorization\\\" header.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Next we need to step aside a bit to explain what Converter is and what is Prettifier in ReportPortal. Converter is a class that converts an object (Header, URI, Param) to a string, which then is logged to ReportPortal. Prettifier is a class that formats a string for better readability. Naturally, HTTP request/response parts such as Header, URI, Param and Cookie require converters, while Body requires prettifier.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So, form parameters pass through `DefaultFormParamConverter` converter to be logged, and `ReportPortalRestAssuredLoggingFilter` class allows to configure custom converter for form parameters, with which we can hide \\\"password\\\" parameter. Let's create this custom converter:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"private static final Function<Param, String> SANITIZING_PARAM_CONVERTER = new Function<>() { \\n   @Override \\n   public @Nullable String apply(@Nullable Param param) { \\n      return DefaultFormParamConverter.INSTANCE.apply(ofNullable(param).filter(p -> \\\"password\\\".equalsIgnoreCase(p.getName())) \\n            .map(p -> { \\n               Param newParam = p.clone(); \\n               newParam.setValue(\\\"<removed>\\\"); \\n               return newParam; \\n            }) \\n            .orElse(param)); \\n   } \\n}; \",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What we did here is we check if the parameter name is \\\"password\\\" (ignoring case) and if it is, we replace its value with \\\"<removed>\\\". Otherwise, we just return the parameter as is. We also then apply `DefaultFormParamConverter` to convert the resulting parameter to a string.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"With prettifiers it's a bit harder to configure, since `ReportPortalRestAssuredLoggingFilter` class has its own prettifier for every body type (JSON, XML, Text, etc.) and the class does not allow modifying them on the fly. So, we need to get all of them, create our own prettifier, which will use the original prettifier to format the body and replace the sensitive information with \\\"<removed>\\\" tag and then replace the original prettifier with our own. Here is how it looks like:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"@NotNull \\nprivate static Map<String, Function<String, String>> getUpdatedPrettifiersMap(@Nonnull Map<String, Function<String, String>> prettifiers) { \\n   Map<String, Function<String, String>> myPrettifiers = new HashMap<>(prettifiers); \\n   Function<String, String> jsonPrettifier = myPrettifiers.get(\\\"application/json\\\"); \\n   Function<String, String> jsonSanitizer = json -> jsonPrettifier.apply(json.replaceAll( \\n         \\\"access_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\n                    \\\"access_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\" \\n            ) \\n            .replaceAll(\\\"refresh_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\\"refresh_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\")); \\n   myPrettifiers.put(\\\"application/json\\\", jsonSanitizer); \\n   return myPrettifiers; \\n} \\n \\n@BeforeClass \\npublic void setupRestAssured() { \\n   RestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples \\n    ReportPortalRestAssuredLoggingFilter logger = new ReportPortalRestAssuredLoggingFilter( \\n         42, \\n            LogLevel.INFO, \\n            SanitizingHttpHeaderConverter.INSTANCE, \\n            DefaultHttpHeaderConverter.INSTANCE, \\n            DefaultCookieConverter.INSTANCE, \\n            DefaultUriConverter.INSTANCE, \\n            SANITIZING_PARAM_CONVERTER \\n    ); \\n   logger.setContentPrettifiers(getUpdatedPrettifiersMap(logger.getContentPrettifiers())); \\n   RestAssured.filters(logger); \\n} \\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nAnd here is how it looks like on ReportPortal:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"5cxAXSgFHeVEUQXIVULR6T\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Cool! Now we have covered all the cases of sensitive information exposure in logs. And to recap, here is the full test class:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"package com.epam.reportportal.example.testng.logback.logging.restassured;\\n\\nimport com.epam.reportportal.formatting.http.converters.*;\\nimport com.epam.reportportal.formatting.http.entities.Param;\\nimport com.epam.reportportal.listeners.*;\\nimport com.epam.reportportal.restassured.ReportPortalRestAssuredLoggingFilter;\\nimport com.epam.reportportal.service.Launch;\\nimport io.restassured.RestAssured;\\nimport org.testng.annotations.*;\\n\\nimport javax.annotation.*;\\nimport java.nio.charset.StandardCharsets;\\nimport java.util.Base64;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.function.Function;\\n\\nimport static java.util.Optional.ofNullable;\\n\\npublic class RestAssuredFormTest {\\n\\n\\tprivate static final Function<Param, String> SANITIZING_PARAM_CONVERTER = new Function<>() {\\n\\t\\t@Override\\n\\t\\tpublic @Nullable String apply(@Nullable Param param) {\\n\\t\\t\\treturn DefaultFormParamConverter.INSTANCE.apply(ofNullable(param).filter(p -> \\\"password\\\".equalsIgnoreCase(p.getName()))\\n\\t\\t\\t\\t\\t.map(p -> {\\n\\t\\t\\t\\t\\t\\tParam newParam = p.clone();\\n\\t\\t\\t\\t\\t\\tnewParam.setValue(\\\"<removed>\\\");\\n\\t\\t\\t\\t\\t\\treturn newParam;\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.orElse(param));\\n\\t\\t}\\n\\t};\\n\\n\\t@Nonnull\\n\\tprivate static Map<String, Function<String, String>> getUpdatedPrettifiersMap(@Nonnull Map<String, Function<String, String>> prettifiers) {\\n\\t\\tMap<String, Function<String, String>> myPrettifiers = new HashMap<>(prettifiers);\\n\\t\\tFunction<String, String> jsonPrettifier = myPrettifiers.get(\\\"application/json\\\");\\n\\t\\tFunction<String, String> jsonSanitizer = json -> jsonPrettifier.apply(json.replaceAll(\\n\\t\\t\\t\\t\\t\\t\\\"access_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\\"access_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\"\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t.replaceAll(\\\"refresh_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\\"refresh_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\"));\\n\\t\\tmyPrettifiers.put(\\\"application/json\\\", jsonSanitizer);\\n\\t\\treturn myPrettifiers;\\n\\t}\\n\\n\\t@BeforeClass\\n\\tpublic void setupRestAssured() {\\n\\t\\tRestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples\\n\\t\\tReportPortalRestAssuredLoggingFilter logger = new ReportPortalRestAssuredLoggingFilter(\\n\\t\\t\\t\\t42,\\n\\t\\t\\t\\tLogLevel.INFO,\\n\\t\\t\\t\\tSanitizingHttpHeaderConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultHttpHeaderConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultCookieConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultUriConverter.INSTANCE,\\n\\t\\t\\t\\tSANITIZING_PARAM_CONVERTER\\n\\t\\t);\\n\\t\\tlogger.setContentPrettifiers(getUpdatedPrettifiersMap(logger.getContentPrettifiers()));\\n\\t\\tRestAssured.filters(logger);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void restAssuredLoggingTest() {\\n\\t\\tListenerParameters parameters = ofNullable(Launch.currentLaunch()).map(Launch::getParameters)\\n\\t\\t\\t\\t.orElseThrow(() -> new IllegalStateException(\\\"Launch is not started\\\"));\\n\\t\\tRestAssured.given()\\n\\t\\t\\t\\t.header(\\\"Authorization\\\", \\\"Basic \\\" + Base64.getEncoder().encodeToString(\\\"ui:uiman\\\".getBytes(StandardCharsets.UTF_8)))\\n\\t\\t\\t\\t.formParam(\\\"username\\\", \\\"default\\\")\\n\\t\\t\\t\\t.formParam(\\\"password\\\", \\\"1q2w3e\\\")\\n\\t\\t\\t\\t.formParam(\\\"grant_type\\\", \\\"password\\\")\\n\\t\\t\\t\\t.post(parameters.getBaseUrl() + \\\"/uat/sso/oauth/token\\\")\\n\\t\\t\\t\\t.then()\\n\\t\\t\\t\\t.assertThat()\\n\\t\\t\\t\\t.statusCode(200);\\n\\t}\\n}\\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In this article, we explored how to protect sensitive information in logs when using ReportPortal and REST Assured logger. We covered three cases of sensitive information exposure in logs and how to handle them using ReportPortal's built-in functionality. `ReportPortalRestAssuredLoggingFilter` class has converters and prettifiers configuration which we can use and extend to cover our needs. We also learned how to create custom converters and prettifiers to handle specific cases of sensitive information exposure in logs.\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Exclude sensitive information from logs in ReportPortal"},"leadParagraph":{"leadParagraph":"When working with sensitive data in your application, it's important to protect it from unauthorized access. One key part of security is controlling how sensitive information appears in logs. In this article, we’ll explore how ReportPortal hides confidential data."},"category":["Product"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/6T6w6SfEZEN93CI3ehFWdw/8387aeb7856cf111c926a1a3043fd4ae/ExcludeSensitiveLogs-icon.png"}},"slug":"exclude-sensitive-information-from-logs-in-reportportal"}]}}}