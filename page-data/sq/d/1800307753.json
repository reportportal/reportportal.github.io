{"data":{"allContentfulBlogPost":{"nodes":[{"id":"b5bcf476-0e4f-522d-a78f-95a9f4cf7fe3","date":"April 2nd, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When working with sensitive data in your application, it's important to protect it from unauthorized access. One key part of security is controlling how sensitive information appears in logs. In this article, we’ll explore how ReportPortal hides confidential data.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logging helps developers and testers understand how an application works, find errors, and track tests. However, logs can sometimes include sensitive details like API keys, passwords, or access tokens. This can be a security risk, so it’s important to know how to prevent such data from being exposed. To demonstrate filtering capabilities, we will be using the REST Assured logger in ReportPortal of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/reportportal/logger-java-rest-assured/releases/tag/5.3.9\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"version 5.3.9\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", since this version contains all the necessary functionality.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal ensures data security by:\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Removing sensitive information from the \\\"Authorization\\\" header \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Filtering out confidential data from headers, URLs, and cookies \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Masking sensitive content in response bodies\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #1: Removing sensitive information from the \\\"Authorization\\\" header\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A while ago, the REST Assured logger in ReportPortal started supporting excluding sensitive information from blacklisted header configuration of REST Assured. You can do this by specific configuration of REST Assured: \\n`RestAssuredConfig.config().logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\"))`.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is a full example:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"import com.epam.reportportal.listeners.*; \\nimport com.epam.reportportal.restassured.ReportPortalRestAssuredLoggingFilter; \\nimport com.epam.reportportal.service.Launch; \\nimport io.restassured.RestAssured; \\nimport io.restassured.config.*; \\nimport org.testng.annotations.*; \\n \\nimport static java.util.Optional.ofNullable; \\n \\npublic class RestAssuredSimpleSanitizeTest { \\n   private static final RestAssuredConfig CONFIG = RestAssuredConfig.config() \\n         .logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\")); \\n    \\n  @BeforeClass \\n   public void setupRestAssured() { \\n      RestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples \\n      RestAssured.filters(new ReportPortalRestAssuredLoggingFilter(42, LogLevel.INFO)); \\n   } \\n    \\n  @Test \\n   public void simpleRestAssuredLoggingTest() { \\n      ListenerParameters parameters = ofNullable(Launch.currentLaunch()).map(Launch::getParameters) \\n            .orElseThrow(() -> new IllegalStateException(\\\"Launch is not started\\\")); \\n      RestAssured.given() \\n            .config(CONFIG) \\n            .header(\\\"Authorization\\\", \\\"Bearer \\\" + parameters.getApiKey()) \\n            .get(parameters.getBaseUrl() + \\\"/api/v1/\\\" + parameters.getProjectName() + \\\"/settings\\\") \\n            .then() \\n            .assertThat() \\n            .statusCode(200); \\n   } \\n} \",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is how it looks on ReportPortal:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"271yKZovVHZgXVbkFDZQfk\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So we see that the \\\"Authorization\\\" header is hidden in the logs, while other headers and request/response bodies are logged as usual. It's a step in the right direction for securing sensitive information in logs, but it can't be the complete solution. Modern API use cases almost always involve more complex sensitive data transfer cases, which require more sophisticated handling of sensitive data. Fortunately, ReportPortal provides additional converters and prettifiers that help exclude such data from logs.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #2: Removing sensitive information from headers, URL, and cookies\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Imagine you are testing a browser authorization mechanism, which involves HTTP request that includes sensitive information in the headers and URL, E.G. basic authorization header with client credentials and user credentials in the URL. And in response to the request server sets Cookies with the Session ID to authorize the browser, therefore Session ID should be also confidential. Let's see what we will have in logs in this case:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1tRTuLjRkjFdfrSkLHNkOe\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It doesn't look good, right? So, what can we do to hide this sensitive information? First, since all filers and converters are working both on request and response logs, we can use the same `blacklistHeader` method to hide \\\"Set-Cookie\\\" header in the response. But we still have to deal with URL credentials the request and separate Cookie logging in the response. For this purpose, ReportPortal provides `SanitizingUriConverter` converter, which removes passwords from URIs, and `SanitizingCookieConverter` converter, which removes Session IDs from cookies.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So our REST Assured configuration becomes like this:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"private static final RestAssuredConfig CONFIG = RestAssuredConfig.config() \\n        .logConfig(LogConfig.logConfig().blacklistHeader(\\\"Authorization\\\").blacklistHeader(\\\"Set-Cookie\\\")); \\n\",\"marks\":[{\"type\":\"italic\"},{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"And filter configuration is also a bit different:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"RestAssured.filters(new ReportPortalRestAssuredLoggingFilter( \\n      42, \\n        LogLevel.INFO, \\n        DefaultHttpHeaderConverter.INSTANCE, \\n        DefaultHttpHeaderConverter.INSTANCE, \\n        SanitizingCookieConverter.INSTANCE, \\n        SanitizingUriConverter.INSTANCE \\n )); \",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here is how it looks on ReportPortal now:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1sPcHYodV8xvlYzqmcyyaN\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Way better!\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Case #3: Removing sensitive information from response body\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Let's look at another example, where we have a response body with sensitive information, which we want to hide from logs. For example, we are testing an oAuth 2.0 authorization flow, where we have a response body with an access token and refresh token. Here is how it looks like in logs:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"6hvZ1cPISBY1M0CAUo4dZu\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So here we see the following data which needs to be sanitized: Basic Authorization header, \\\"password\\\" form parameter, \\\"access_token\\\" and refresh_token\\\" fields in the response body. To shorten the configuration, we will use `SanitizingHttpHeaderConverter` class from ReportPortal libraries, which hides the \\\"Authorization\\\" header.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Next we need to step aside a bit to explain what Converter is and what is Prettifier in ReportPortal. Converter is a class that converts an object (Header, URI, Param) to a string, which then is logged to ReportPortal. Prettifier is a class that formats a string for better readability. Naturally, HTTP request/response parts such as Header, URI, Param and Cookie require converters, while Body requires prettifier.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"So, form parameters pass through `DefaultFormParamConverter` converter to be logged, and `ReportPortalRestAssuredLoggingFilter` class allows to configure custom converter for form parameters, with which we can hide \\\"password\\\" parameter. Let's create this custom converter:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"private static final Function<Param, String> SANITIZING_PARAM_CONVERTER = new Function<>() { \\n   @Override \\n   public @Nullable String apply(@Nullable Param param) { \\n      return DefaultFormParamConverter.INSTANCE.apply(ofNullable(param).filter(p -> \\\"password\\\".equalsIgnoreCase(p.getName())) \\n            .map(p -> { \\n               Param newParam = p.clone(); \\n               newParam.setValue(\\\"<removed>\\\"); \\n               return newParam; \\n            }) \\n            .orElse(param)); \\n   } \\n}; \",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\n\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What we did here is we check if the parameter name is \\\"password\\\" (ignoring case) and if it is, we replace its value with \\\"<removed>\\\". Otherwise, we just return the parameter as is. We also then apply `DefaultFormParamConverter` to convert the resulting parameter to a string.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"With prettifiers it's a bit harder to configure, since `ReportPortalRestAssuredLoggingFilter` class has its own prettifier for every body type (JSON, XML, Text, etc.) and the class does not allow modifying them on the fly. So, we need to get all of them, create our own prettifier, which will use the original prettifier to format the body and replace the sensitive information with \\\"<removed>\\\" tag and then replace the original prettifier with our own. Here is how it looks like:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"@NotNull \\nprivate static Map<String, Function<String, String>> getUpdatedPrettifiersMap(@Nonnull Map<String, Function<String, String>> prettifiers) { \\n   Map<String, Function<String, String>> myPrettifiers = new HashMap<>(prettifiers); \\n   Function<String, String> jsonPrettifier = myPrettifiers.get(\\\"application/json\\\"); \\n   Function<String, String> jsonSanitizer = json -> jsonPrettifier.apply(json.replaceAll( \\n         \\\"access_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\n                    \\\"access_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\" \\n            ) \\n            .replaceAll(\\\"refresh_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\\"refresh_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\")); \\n   myPrettifiers.put(\\\"application/json\\\", jsonSanitizer); \\n   return myPrettifiers; \\n} \\n \\n@BeforeClass \\npublic void setupRestAssured() { \\n   RestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples \\n    ReportPortalRestAssuredLoggingFilter logger = new ReportPortalRestAssuredLoggingFilter( \\n         42, \\n            LogLevel.INFO, \\n            SanitizingHttpHeaderConverter.INSTANCE, \\n            DefaultHttpHeaderConverter.INSTANCE, \\n            DefaultCookieConverter.INSTANCE, \\n            DefaultUriConverter.INSTANCE, \\n            SANITIZING_PARAM_CONVERTER \\n    ); \\n   logger.setContentPrettifiers(getUpdatedPrettifiersMap(logger.getContentPrettifiers())); \\n   RestAssured.filters(logger); \\n} \\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nAnd here is how it looks like on ReportPortal:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"5cxAXSgFHeVEUQXIVULR6T\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Cool! Now we have covered all the cases of sensitive information exposure in logs. And to recap, here is the full test class:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"package com.epam.reportportal.example.testng.logback.logging.restassured;\\n\\nimport com.epam.reportportal.formatting.http.converters.*;\\nimport com.epam.reportportal.formatting.http.entities.Param;\\nimport com.epam.reportportal.listeners.*;\\nimport com.epam.reportportal.restassured.ReportPortalRestAssuredLoggingFilter;\\nimport com.epam.reportportal.service.Launch;\\nimport io.restassured.RestAssured;\\nimport org.testng.annotations.*;\\n\\nimport javax.annotation.*;\\nimport java.nio.charset.StandardCharsets;\\nimport java.util.Base64;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.function.Function;\\n\\nimport static java.util.Optional.ofNullable;\\n\\npublic class RestAssuredFormTest {\\n\\n\\tprivate static final Function<Param, String> SANITIZING_PARAM_CONVERTER = new Function<>() {\\n\\t\\t@Override\\n\\t\\tpublic @Nullable String apply(@Nullable Param param) {\\n\\t\\t\\treturn DefaultFormParamConverter.INSTANCE.apply(ofNullable(param).filter(p -> \\\"password\\\".equalsIgnoreCase(p.getName()))\\n\\t\\t\\t\\t\\t.map(p -> {\\n\\t\\t\\t\\t\\t\\tParam newParam = p.clone();\\n\\t\\t\\t\\t\\t\\tnewParam.setValue(\\\"<removed>\\\");\\n\\t\\t\\t\\t\\t\\treturn newParam;\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.orElse(param));\\n\\t\\t}\\n\\t};\\n\\n\\t@Nonnull\\n\\tprivate static Map<String, Function<String, String>> getUpdatedPrettifiersMap(@Nonnull Map<String, Function<String, String>> prettifiers) {\\n\\t\\tMap<String, Function<String, String>> myPrettifiers = new HashMap<>(prettifiers);\\n\\t\\tFunction<String, String> jsonPrettifier = myPrettifiers.get(\\\"application/json\\\");\\n\\t\\tFunction<String, String> jsonSanitizer = json -> jsonPrettifier.apply(json.replaceAll(\\n\\t\\t\\t\\t\\t\\t\\\"access_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\\"access_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\"\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t.replaceAll(\\\"refresh_token\\\\\\\"(\\\\\\\\s*):(\\\\\\\\s*)\\\\\\\"[^\\\\\\\"]*\\\\\\\"\\\", \\\"refresh_token\\\\\\\"$1:$2\\\\\\\"<removed>\\\\\\\"\\\"));\\n\\t\\tmyPrettifiers.put(\\\"application/json\\\", jsonSanitizer);\\n\\t\\treturn myPrettifiers;\\n\\t}\\n\\n\\t@BeforeClass\\n\\tpublic void setupRestAssured() {\\n\\t\\tRestAssured.reset(); // Reset everything to avoid collisions with other REST Assured examples\\n\\t\\tReportPortalRestAssuredLoggingFilter logger = new ReportPortalRestAssuredLoggingFilter(\\n\\t\\t\\t\\t42,\\n\\t\\t\\t\\tLogLevel.INFO,\\n\\t\\t\\t\\tSanitizingHttpHeaderConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultHttpHeaderConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultCookieConverter.INSTANCE,\\n\\t\\t\\t\\tDefaultUriConverter.INSTANCE,\\n\\t\\t\\t\\tSANITIZING_PARAM_CONVERTER\\n\\t\\t);\\n\\t\\tlogger.setContentPrettifiers(getUpdatedPrettifiersMap(logger.getContentPrettifiers()));\\n\\t\\tRestAssured.filters(logger);\\n\\t}\\n\\n\\t@Test\\n\\tpublic void restAssuredLoggingTest() {\\n\\t\\tListenerParameters parameters = ofNullable(Launch.currentLaunch()).map(Launch::getParameters)\\n\\t\\t\\t\\t.orElseThrow(() -> new IllegalStateException(\\\"Launch is not started\\\"));\\n\\t\\tRestAssured.given()\\n\\t\\t\\t\\t.header(\\\"Authorization\\\", \\\"Basic \\\" + Base64.getEncoder().encodeToString(\\\"ui:uiman\\\".getBytes(StandardCharsets.UTF_8)))\\n\\t\\t\\t\\t.formParam(\\\"username\\\", \\\"default\\\")\\n\\t\\t\\t\\t.formParam(\\\"password\\\", \\\"1q2w3e\\\")\\n\\t\\t\\t\\t.formParam(\\\"grant_type\\\", \\\"password\\\")\\n\\t\\t\\t\\t.post(parameters.getBaseUrl() + \\\"/uat/sso/oauth/token\\\")\\n\\t\\t\\t\\t.then()\\n\\t\\t\\t\\t.assertThat()\\n\\t\\t\\t\\t.statusCode(200);\\n\\t}\\n}\\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nIn this article, we explored how to protect sensitive information in logs when using ReportPortal and REST Assured logger. We covered three cases of sensitive information exposure in logs and how to handle them using ReportPortal's built-in functionality. `ReportPortalRestAssuredLoggingFilter` class has converters and prettifiers configuration which we can use and extend to cover our needs. We also learned how to create custom converters and prettifiers to handle specific cases of sensitive information exposure in logs.\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Exclude sensitive information from logs in ReportPortal"},"leadParagraph":{"leadParagraph":"When working with sensitive data in your application, it's important to protect it from unauthorized access. One key part of security is controlling how sensitive information appears in logs. In this article, we’ll explore how ReportPortal hides confidential data."},"category":["Product"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/6T6w6SfEZEN93CI3ehFWdw/8387aeb7856cf111c926a1a3043fd4ae/ExcludeSensitiveLogs-icon.png"}},"slug":"exclude-sensitive-information-from-logs-in-reportportal"},{"id":"1e89f4bf-85b8-56a3-a2dd-e579f98d305e","date":"March 19th, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The financial sector is one of the most demanding industries when it comes to software quality and security. Companies in this space require robust testing tool that not only ensure software reliability but also align with strict regulatory and compliance requirements. ReportPortal stands out as a powerful solution that addresses these needs effectively. Below, we explore why ReportPortal is uniquely suited for financial institutions.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"On-premises deployment for data security\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nFinancial organizations handle highly sensitive information and need secure systems. Unlike many testing tools that only offer SaaS solutions, ReportPortal allows \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/pricing/on-premises\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"on-premises deployment\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", ensuring all test data stays within the company’s secure infrastructure. This gives organizations full control over their data and helps them comply with regulations like GDPR, PCI DSS and others.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Open licensing under Apache 2.0\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal is open source, licensed under Apache 2.0. This means no vendor lock-in — companies can use the tool without long-term contracts. It’s flexible, letting teams customize and integrate it with their systems, making it future proof for changing needs.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Cost-effective support and SaaS offering\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nHigh costs often come with enterprise testing tools, but ReportPortal stands out by offering cost-effective support packages and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/pricing/saas/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"SaaS options\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". This makes it an appealing choice for organizations that need top-quality features without breaking the bank.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Compliance support with SOC 2 certification\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nSecurity and compliance are essential for companies that work with sensitive data. ReportPortal has successfully passed a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/blog/reportportal-completes-soc-2-type-ii-audit/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"SOC 2 Type II audit\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" by Deloitte, proving that we follow strict security standards. This certification is based on key principles like security, availability, and data privacy, ensuring that our system is safe and reliable. Many businesses require SOC 2 compliance when choosing a service provider, and this certification confirms that ReportPortal protects customer data and meets high industry standards.\\n\\nFurthermore, ReportPortal is backed by EPAM (NYSE: EPAM), a global company that undergoes multiple security and compliance audits annually. EPAM holds certifications such as SOC 1 - ISAE 3402, ISO/IEC 27001, and ISO 9001, further strengthening our commitment to maintaining the highest standards of security, quality management, and information protection. These credentials ensure that ReportPortal provides a trusted, enterprise-grade solution for organizations prioritizing data security and compliance.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Centralized reporting and department-level summaries\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal serves as a central entry point for test analytics, aggregating data from multiple testing streams and providing summary reports by department. This feature is invaluable for large-scale financial institutions, allowing managers and executives to access metrics relevant to their areas of responsibility. It accelerates decision-making and enhances transparency across the organization.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Compliance-friendly and regulatory reporting\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nStaying compliant with regulations like SOX or BASEL III is easy with ReportPortal. It automatically generates \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ReportingAndMetricsInReportPortal/#test-automation-reports-in-reportportal\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"detailed reports\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" with \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/dashboards-and-widgets/ReportingAndMetricsInReportPortal/#qa-and-test-automation-metrics-in-reportportal\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"different metrics\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" simplifying audits and ensuring compliance.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Hybrid environments support\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nFinancial institutions often use a mix of cloud and on-premises systems. ReportPortal integrates seamlessly across these environments, ensuring consistent reporting and smooth transitions.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Advanced role-based access control\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal allows organizations to set role-based access restrictions, so sensitive information is only accessible to authorized users, enhancing security while promoting teamwork.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Predictive analytics with AI/ML\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal uses \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/analysis/AutoAnalysisOfLaunches/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"AI\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" to analyze test results, predict potential problems, and improve processes, saving time and increasing testing accuracy.\\n\\nJust to be more specific, we are using a combination of kNN algorithm and Gradient Boosting Trees, leveraging indexed logs within the OpenSearch engine behind ReportPortal.\\n\\nIt is a “classic ML”, which is still relevant and highly useful. Compared to GenAI, it offers more predictable results and lower operational costs. As well as the benefit of “keeping all the data in-house”.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Multilingual and global support\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nFor global financial organizations, ReportPortal offers multilingual interface options and localization, facilitating adoption across different regions and markets, with support for American English, Ukrainian, Russian, Belarusian, Chinese, and Spanish.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Metrics for automation ROI\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal provides detailed metrics on automation performance, including \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/blog/test-automation-roi/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"ROI\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", tool efficiency, and reductions in testing time. These insights help financial institutions evaluate and improve their automation strategies.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Real-time reporting and analytics\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal’s centralized dashboard provides real-time insights into testing activities, enabling faster decision-making and issue resolution. This capability is especially critical in financial software testing, where downtime or defects can have severe consequences.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Seamless integration with testing ecosystems\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal integrates easily with popular \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/log-data-in-reportportal/test-framework-integration/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"test automation frameworks\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://reportportal.io/docs/quality-gates/IntegrationWithCICD/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"CI/CD pipelines\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", ensuring a streamlined workflow for development and QA teams.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Scalability for enterprise needs\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nFinancial institutions often operate at a scale that requires tools capable of managing large volumes of test data. ReportPortal’s architecture supports scalability, making it suitable for enterprises with complex testing requirements.\\n\\nFor financial companies looking for a strong, secure, and cost-effective test automation reporting tool, ReportPortal is a top choice. Its on-premises deployment option addresses stringent data security needs, its open-source licensing ensures flexibility and risk mitigation, and its competitive pricing makes it an attractive choice for companies of all sizes. By adopting ReportPortal, financial institutions can enhance their software testing processes while maintaining compliance, security, and efficiency.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Benefits of ReportPortal for financial sector"},"leadParagraph":{"leadParagraph":"The financial sector is one of the most demanding industries when it comes to software quality and security. Companies in this space require robust testing tool that not only ensure software reliability but also align with strict regulatory and compliance requirements."},"category":["Product"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/JFB732DrI2MImScPpmsSg/66073f7500d1f29e8d819c5dd81c5543/BenefitsFinancialSector-icon.png"}},"slug":"benefits-of-reportportal-for-financial-sector"},{"id":"73627602-f2b6-5888-8c59-4856ecf6bbf3","date":"February 20th, 2025","author":"ReportPortal Team","articleBody":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"From the perspective of test automation, in complex, distributed systems, simply running tests is not enough to uncover the root causes of failures or identify blockers. That is why test observability plays a crucial role in the development process. Test automation reporting tools like ReportPortal enable teams to centralize test data, analyze results in real time, and gain actionable insights, significantly improving debugging processes and overall test effectiveness.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What is test observability?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Test observability refers to the ability to track, measure, and understand the performance of automated tests throughout the development process. By collecting and analyzing important data during testing, it enables teams to quickly identify the causes of issues, optimize testing processes, and deliver high-quality software. This visibility allows to proactively address potential issues before they impact end-users, reducing the cost and time associated with fixing defects.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Benefits of test observability\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Faster problem solving\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nObservability helps find the exact cause of test failures quickly by providing logs, metrics, and traces.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"More reliable tests\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nIt helps identify and fix flaky tests, making your test suite more stable.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Better test coverage\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nObservability shows which parts of the code are tested and which are not, helping improve test coverage.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Faster tests\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nBy analyzing test performance, you can find slow tests and make them faster.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Catch problems early\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nObservability helps you spot unusual patterns or potential issues before they cause big problems.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Fits with CI/CD pipelines\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nIt works well with automated systems to give real-time feedback when code changes are made.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Better decisions with data\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nObservability provides useful insights to help prioritize which tests or problems to focus on.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Improves team collaboration\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nEveryone on the team can see the same data, making it easier to work together to solve problems.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"More confidence in releases\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nObservability gives a clear view of test results and application health, making releases safer and more reliable.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How does ReportPortal support test observability?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Data collection\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal collects test results, provides detailed execution logs, and helps visualize this data. This is a key component of observability — access to information for understanding system behavior.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Key metrics\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nWith customizable widgets and dashboards, ReportPortal allows tracking of QA and test automation metrics. Visualization helps quickly assess the current state of the testing process.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Test tracing\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal provides a step-by-step breakdown of test execution with traceability, enabling users to identify which steps caused a failure.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Logs\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal provides access to all logs with error messages, attachments for root cause analysis, helping to quickly identify and resolve issues.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Error analysis\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nUsing machine learning, ReportPortal can automatically classify issues. This reduces the time needed for defect triage and troubleshooting.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"CI/CD integration\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nReportPortal integrates with systems like Jenkins allowing real-time analysis of the impact of changes on test results.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Retrospective and predictive analysis\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\nBy keeping a history of test executions, ReportPortal provides the ability to analyze trends helping to predict potential issues.\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"ReportPortal is a specialized tool that significantly enhances test observability for automation by providing visibility into test execution, analyzing errors, and improving the stability of the testing system.\",\"marks\":[],\"data\":{}}]}]}"},"title":{"title":"Test observability"},"leadParagraph":{"leadParagraph":"From the perspective of test automation, in complex, distributed systems, simply running tests is not enough to uncover the root causes of failures or identify blockers. That is why test observability plays a crucial role in the development process."},"category":["Other"],"featuredImage":{"file":{"url":"//images.ctfassets.net/1n1nntnzoxp4/2yzuzv8CQ6wfnWpSxMgNZw/8ceda3298483e05589be63f4278bca95/TestObservability-icon.jpg"}},"slug":"test-observability"}]}}}